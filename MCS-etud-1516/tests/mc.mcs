// NB. Ce programme ne sert qu'a illustrer les concepts de mC
// et ne calcule rien de particulier !
// nom de type (doit commencer par une majuscule)
typedef int Entier ; 

// variable globale
Entier x;

// nom de type donne a un struct
typedef struct {
  int x;
  int y;
} Point ;

// variable globale
Point p;

// Assembleur inline dans une fonction. 
// malloc en TAM : 
// params : Taille : entier (pre : >0)
// retour : entier (post : une adresse dans le tas)
int malloc (int taille) {
  int adr;
  // appel a l'allocation TAM
  asm {
    LOAD %taille    ; acces au parametre taille
    SUBR Malloc     ; allocation
    STORE %adr      ; resultat dans adr
  }
  return adr;
}

// fonction illustrant la manipulation de pointeurs.
int foo(int n, int m){
    // declaration de variable locale sans initialisation
    int xxx;
    xxx = 100;
    // declaration avec initialisation
    int a = n + m;
    // declaration d'un pointeur et allocation de la zone pointee
    int *l = (int *)malloc(1);
    a = *l +666;
    // declaration d'un pointeur sur pointeur
    int ** k = (int **)malloc(1) ;
    *k = l;
    // allocation
    *k = (int *)malloc(1) ;
    ** k = 12;
    int b = **k + 9999;
    // cast
    l = (int *)malloc(1);
    return *l;
}

// fonction illustrant les expressions arithmetiques
int bar(int a, int b){
   struct { int x; int y; } *pt;
   pt->x = 3;
   pt->y = 3;
   int u = 301;
   int v = 401;
   int result;
   result = foo(33*a - b , (-55*u/22+11/v));
   return result;
} 


// fonction renvoyant un pointeur utilisant la fonction precedente
int * pointeur(int x){
  // declaration et allocation
  int *pp = malloc(x);
  // appel fonction foo
  *pp = foo(999, 1);
  // retourner le pointeur
  return pp;
  }


// Assembleur inline dans une fonction
// log : afficher un message et une valeur
void log(char message, int valeur){
  int xx = 12;
  asm {
    LOAD %message        ; acces au premier parametre
    SUBR Sout
    LOAD %valeur         ; acces au deuxieme parametre
    LOAD %xx              ; acces a la variable xx
    SUBR IAdd
    SUBR IOUT
    SUBR LN 
    }
}

// point d'entree du programme.
int main(){
    int a = 3;
    char c = 'a';
    int y = 999;
    // appel fonction
    int res = foo (y, (int) c);
    // appel fonction bar
    log('H', bar(98,99));
    // instruction conditionnelle
    if (y ==0){
       log('a',y);}
    else {
       log('s', y);
    }
    return 0;
}
