-----------------------------------------------------
-- Grammaires de MC  et MCS                       --
-----------------------------------------------------
--options
option auto = true;
option version = 0.0.1;
option k=2;
--attributes 

-- le fichier source
inh source : MCSSourceFile for PROGRAMME;
-- la machine cible pour la generation de code
inh machine : IMachine for 
         ENTITES, ENTITE, DECL, FONCTION, INST, BLOC, INSTS, SIX,
         PARFS, PARF, PARFSX, ES, ESX, 
         E, AFFX, A, AX, R, RX, T, TX, F,FX
--         -- decommenter la ligne suivante pour MCS
--       , BASE, DEFS, DEF
--         -- fin extension MCS
         ;
 syn type : DTYPE for TYPE, STYPE, PTRS,CHAMP, E, AFFX,F,R,RT,RX,AX,FX;
 inh htype: DTYPE for PTRS,DECL,FONCTION,FX;
 inh hdep : INTEGER for INSTS, INST , CHAMPS;
 syn dep : INTEGER for INST , INSTS;
 inh champs : LCHAMPS for CHAMPS,CHAMP;
 syn para: LinkedHashMap for PARF,PARFS,PARFSX,E,ES,ESX;
-- ces attributs permettent de recuperer les instructions du code ASM inline       
syn code_asm : STRING for ASM;
-- la TDS courante
inh tds_asm : TDS for ASM;
inh tds : TDS for ENTITES, ENTITE, DECL, FONCTION,PARF, PARFS,PARFSX, 
TYPE, STYPE, SIX,CHAMPS, CHAMP, INST,INSTS, BLOC, E, A, AFFX, R,
T, TX, ES, ESX, R, RX,F,FX;
inh nom : STRING for DECL;
syn hnom : STRING for CHAMP;
inh infofon : INFOFONC for FONCTION,BLOC,INST,SIX;
inh info : INFO for FX;

--terminals
space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar virg is  ",";
sugar pt is "\.";
sugar pv is  "\;";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar asm is  "asm";
sugar int is  "int";
sugar char is  "char";
sugar struct is "struct";
sugar typedef is "typedef";
-- decommenter pour MCS
--sugar ref is "ref" ;
--sugar out is "out";
--sugar namespace is "namespace";
--sugar using is "using";
--sugar class is "class";
--sugar public is "public" ;
--sugar private is "private";
--sugar dpts is "\:";
--sugar bool is "bool";
--sugar true is "true";
--sugar false is "false";
--sugar this is "this";
--sugar new is "new" ;
--sugar null2 is "null";
--sugar base is "base" ;
-- 
sugar retour is  "return";
sugar arrow is "\-\>";
sugar null is  "NULL";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
term entier is  "[0-9]+";
term caractere is  "\'[^\']\'";
term chaine is  "\"[^\"]*\"";
term ident is  "[a-z][_0-9A-Za-z]*";
term identc is  "[A-Z][_0-9A-Za-z]*";

-- pour les instructions en assembleur TAM 'inline'
compil ASM;

--production rules
PROGRAMME -> #init ENTITES #gen;
global
   machine : IMachine;
-- transmission de la machine cible  (choisie par l'option -m au lancement) 
#init {
local
do
   machine := PROGRAMME^source.getMachine();
   if machine = null then
     error(NO_MACH, PROGRAMME^source.getMachName());
   else
     ENTITES^machine := machine;
     ENTITES^tds:= nil;
   end
end
}
-- ecrit le code dans un fichier
#gen {
local
do
   machine.writeCode(PROGRAMME^source.getFileName(),"; no code\n");  
end
}
ENTITES -> ;
ENTITES -> #tds ENTITE ENTITES ;
global
    t1: TDS;
    t2: TDS;
#tds {
local
do
    t1 := new TDS(ENTITES^tds);
    t2 := new TDS(ENTITES^tds);
    ENTITE^tds := t1;
    ENTITES1^tds := t2;
end
}

-- definition d'un nom de type (commence par une majuscule)
ENTITE -> typedef TYPE identc pv #type ;
#type{
local
    i: INFO;
do
    i := ENTITE^tds.chercherGlobalement(identc^txt);
    if i /= nil then
       error(B_00, identc^txt);
    else    
      -- creer un type
     i := new INFOTYPE(TYPE^type);
     call ENTITE^tds.inserer(identc^txt, i);
    end
end
}
-- definition d'une variable globale ou d'une fonction
-- (commence par une minuscule)
ENTITE -> TYPE ident #decl DECL;
#decl{
do
    DECL^nom := ident^txt;
    DECL^htype := TYPE^type;
end
}
-- Variable
DECL -> pv #def;
#def{
local
i: INFO;
it:INFOTYPE;
do
    i := DECL^tds.chercherGlobalement(DECL^nom);
    if i /= nil then
      error(B_01, DECL^nom);
    else
       i:=new INFOTYPE(DECL^htype);
       call DECL^tds.inserer(DECL^nom, i);
    end
end
}
DECL -> #def FONCTION;
#def{
local
i :INFO;
iff : INFOFONC;
m :LinkedHashMap;
do
    m := new LinkedHashMap();
    i := DECL^tds.chercherGlobalement(DECL^nom);
    if i /= nil then
      error(B_01, DECL^nom);
    else
       FONCTION^htype := DECL^htype;
       call DECL^tds.inserer(DECL^nom, i);
       iff := new INFOFONC(DECL^nom, DECL^htype,m,DECL^tds);
       FONCTION^infofon:= iff;
    end
end
}
-- Fonction
FONCTION ->    paro #gen2 PARFS parf #gen BLOC  ;
#gen2{
local
t: TDS;
t2: TDS;
do
    t := new TDS(FONCTION^tds);
    PARFS^tds := t;
    t2 := new TDS(t);
    BLOC^tds := t2;
    
    FONCTION^infofon.setTDS(t2); 
    
end
}

#gen{
local
t : TDS;
m : LinkedHashMap;
do
    m:=FONCTION^infofon.getParas();
    m.putAll(PARFS^para);
    BLOC^infofon := FONCTION^infofon;
end
}




-- parametres de fonctions
PARFS -> #gen ;
#gen{
local
do
    PARFS^para:= new LinkedHashMap();
end
}

PARFS ->  PARF PARFSX #GEN ;
#GEN{
local
m : LinkedHashMap;
do
    m := new LinkedHashMap();
    m.putAll(PARF^para);
    m.putAll(PARFSX^para);
    PARFS^para := m;
end
}
PARFSX -> #gen ;
#gen{
local
do
    PARFSX^para:= new LinkedHashMap();
end
}

PARFSX ->  virg PARF PARFSX #GEN ;
#GEN{
local
m : LinkedHashMap;
do
    m := new LinkedHashMap();
    m.putAll(PARF^para);
    m.putAll(PARFSX1^para);
    PARFSX^para:=m;
end
}

PARF ->  TYPE ident #gen;
#gen{
local
i:INFOVAR;
m: LinkedHashMap;
do
    i := new INFOVAR(TYPE^type,TYPE^type.getTaille());
    m := new LinkedHashMap();
    m.put(ident^txt,i);
    PARF^para := m;
    call PARF^tds.inserer(ident^txt,i);
end
}

-- les types (de base, noms, struct et pointeurs)
TYPE -> STYPE #type1 PTRS #type2 ;
#type1 {
do 
    PTRS^htype := STYPE^type;
end 
}

#type2 {
do 
    TYPE^type := PTRS^type;
end 
}
-- type de base
-- des * pour definir un pointeur
PTRS -> #type;
#type{
do
    PTRS^type:=PTRS^htype;
end
}


PTRS -> mult #type1 PTRS #type;
#type1{
 local
  p : POINTEUR ;

do
    PTRS1^htype := new POINTEUR(PTRS^htype);
end
}

#type {
do
PTRS^type:=PTRS1^type;
end
}

-- types de base
STYPE-> void #type ;
#type {
do
    STYPE^type := new DTYPE("void", 1);
    -- il faut encore définir la bonne taille
end
}
STYPE-> int #type;
#type {
do
    STYPE^type := new DTYPE("int", 1);
    -- il faut encore définir la bonne taille
end
}
STYPE-> char #type;
#type {
do
    STYPE^type := new DTYPE("char", 1);
    -- il faut encore définir la bonne taille
end
}
-- nom de type (commence par une majuscule)
STYPE -> identc #type;

#type {
 local
    i : INFO ;
    it : INFOTYPE;
    t : DTYPE;
 do
    -- rechercher l'ident   
    i := STYPE^tds.chercherGlobalement(identc^txt);
    if i = null then
      error(B_01, identc^txt);
    else
       match i
       with INFOTYPE then
         it := i ;
         STYPE^type :=  it.getType();
       else
          error(B_07, identc^txt);
       end
    end
  end
}
-------------  
-- et struct
STYPE -> struct aco #ch CHAMPS acf  #type ;
global 
 lc : LCHAMPS ;
#ch {
do
  lc := new LCHAMPS();
  CHAMPS^champs := lc;
  CHAMPS^hdep := 0;
end
}

#type {
 do
   STYPE^type := new STRUCT(lc);
 end
}

CHAMPS -> ;
-- un nom de champ commence par une minuscule
CHAMPS -> CHAMP #ch CHAMPS ;
#ch {
 local
  c : CHAMP ;
 do
  c := CHAMPS^champs.chercher(CHAMP^hnom);
    if c /= nil then
       error(B_00, CHAMP^hnom);
    else    
      c := new CHAMP(CHAMP^hnom, CHAMP^type, CHAMPS^hdep);
     call CHAMPS^champs.inserer(c);
     CHAMPS1^hdep := CHAMPS^hdep +CHAMP^type.getTaille();
    end
 end
}

CHAMP -> TYPE ident pv #gen;
#gen {
do
    CHAMP^hnom:=ident^txt;
    CHAMP^type := TYPE^type;
end
}

-- corps de fonction et bloc d'instructions
BLOC -> aco #tds INSTS acf #gen ;
global        -- globale aux actions de cette regle
  t : TDS;    -- pour voir la TDS du bloc
#tds {
do
   t :=  new TDS(BLOC^tds);
   INSTS^tds := t;
end
}

#gen {
do
   write "; tds:\n" + t;
end
}

-- instructions
INSTS ->   ;
INSTS ->  INST INSTS  ;
-- declaration de variable locale avec ou sans init 
INST ->  TYPE ident AFFX pv ;
-- instruction expression (affectation et appel de procedure)
INST -> E pv ;
-- bloc d'instructions
INST ->  #gen BLOC  ;
#gen{
local
t :TDS;
do
    t := new TDS(INST^tds);
    BLOC^tds := t;
end
}
-- conditionnelle
INST ->   si paro E parf #gen BLOC SIX ;
#gen{
local
t :TDS;
do
    t := new TDS(INST^tds);
    BLOC^tds := t;
end
}
SIX -> sinon #gen BLOC ;
#gen{
local
t :TDS;
do
    t := new TDS(SIX^tds);
    BLOC^tds := t;
end
}
SIX ->;

-- retour de fonction
INST ->  retour  E #type pv ;

#type{
local
t: DTYPE;
do
    t := INST^infofon.getRtype();
    if ~(t.compareTo(E^type)) then 
         error(B_05, "mauvais type de retour"+ INST^infofon.getEtiq());
       end
end
}



-- les expressions -------------
-----------------------------------------------------------------------
-- E = expression (y compris l'affectation)
-- A = expression figurant dans une affectation
-- R = expression figurant dans une expresion relationnelle (boolean ==)
-- T = expression figurant dans une expression additive (TERME) (+ -)
-- F = expression figurant dans une expression multiplicative (FACTEUR  (* /))
-----------------------------------------------------------------------
E ->   A #type AFFX ;
#type{
local
do
   
end
}
-- affectation
AFFX -> affect  A  ;
AFFX -> ;
-- relation
A ->   R AX  ;
AX -> OPREL R;
AX ->  ;
-- operateurs relationnels
OPREL -> inf ;
OPREL -> sup ;
OPREL -> infeg ;
OPREL -> supeg ;
OPREL -> eg ;
OPREL -> neg ;
R ->  T  RX ;
-- additions ...
RX ->   OPADD  T RX  ;
RX -> ;
-- operateurs additifs
OPADD -> plus ;
OPADD -> moins ;
OPADD -> ou ;
-- multiplication, ...
T ->  F  TX  ;
TX ->   OPMUL  F TX  ;
TX ->  ;
-- operateurs multiplicatifs
OPMUL -> mult ;
OPMUL -> div ;
OPMUL -> mod ;
OPMUL -> et ;
-- expressions de base
-- Constante entiere
F -> entier   #type;

#type{
do
       F^type := new DTYPE("int", 1);
    -- il faut encore définir la bonne taille
end
}
-- Constante chaine
F -> chaine #type;

#type{
do
       F^type := new DTYPE("string", 1);
    -- il faut encore définir la bonne taille
end
}
-- Constante caractere
F -> caractere #type;
#type{
do
       F^type := new DTYPE("char", 1);
    -- il faut encore définir la bonne taille
end
}
-- expression unaire
F ->  OPUN  F #type ;
#type{
do
F^type := F1^type;
end
}

-- operateurs unaires
OPUN -> plus ;
OPUN -> moins ;
OPUN -> non;
-- pointeur NULL
F -> null #type ;

#type{
do
F^type := new POINTEUR(null);
end
}
-- expression parenthesee
F ->  paro E parf #type1 FX #type;
#type1{
local
do
FX^htype := E^type;
end
}
#type{
do
    F^type:= E^type;
end
}

F ->  paro TYPE parf  F #type ;
#type{
do
F^type:= TYPE^type;
end
}

F -> mult F #type ;
#type{
do
    F^type := F1^type;
end
}
-- donner les infos a FX
F -> ident #GEN FX #type ;
#GEN{
local
i :INFO;
do
    i := F^tds.chercherGlobalement(ident^txt);
    if i = nil then
        error(B_01,ident^txt);
    else
        FX^info := i;
        FX^htype := i.getType();
    end
end
}

#type{
do
    F^type := FX^type;
end
}

FX -> #type ;
#type{
do
    FX^type := FX^info.getType();
end
}

-- acces champ
FX ->  pt  ident #a FX #type ;

#a {
local
 s : STRUCT ;
 t :DTYPE;
 c : CHAMP;
 lc : LCHAMPS;
do
    t := FX^info.getType(); 
  match t
  with STRUCT then
    s := t;
    lc := s.getChamps();
    c := lc.chercher(ident^txt);
    if c = nil then
      error(B_10, ident^txt) ;
    else
      FX1^htype := c.getType();
      
    end    
  else
    error(B_09, t); 
  end

end
}

#type{
do
    FX^type := FX1^type;
end
}

-- acces champ pointeur
FX ->   arrow ident #a FX #type ;
#a {
local
p : POINTEUR ;
t :DTYPE;
code : STRING;
do
    t := FX^info.getType();
    match t
    with POINTEUR then
        p := t;
        FX1^htype := p.getType();
    else
        error(B_11, FX^htype);
    end
end
}

#type{
do
    FX^type := FX1^type;
end
}


-- appel de sous-programme
FX ->   paro ES parf #gen FX #type;
#gen{
local
iff :INFOFONC;
m : LinkedHashMap;
do
    match FX^info with INFOFONC then
        iff := FX^info;
        m := iff.getParas();
        if ~(m.equals(ES^para)) then
            error(B_08,"parametres pas eguaux");
        end
    end
end
}

#type{
do
    FX^type := FX1^type;
end
}

-- arguments appel de sous-programme
ES -> #gen;
#gen{
local
do
    ES^para:= new LinkedHashMap();
end
}

ES -> E ESX  #GEN;
#GEN{
local
m : LinkedHashMap;
do
    m := new LinkedHashMap();
    m.putAll(E^para);
    m.putAll(ESX^para);
    ES^para:=m;
end
}

ESX ->  #gen;
#gen{
local
do
    ESX^para:= new LinkedHashMap();
end
}

ESX -> virg E ESX #GEN;
#GEN{
local
m : LinkedHashMap;
do
    m := new LinkedHashMap();
    m.putAll(E^para);
    m.putAll(ESX1^para);
    ESX^para:=m;
end
}

------------- inline asm ----------------
-- peut être utile pour implanter des sous-programmes
-- directement en assembleur TAM.
ENTITE ->   asm #tds ASM#gen; 
#tds {
do 
  -- A faire : Remplacer 'null' par la table courante pour que
  -- le code  ASM puisse acceder aux variables de MC ou MCS
  ASM^tds_asm := null; 
end
}
#gen {
do
  -- On recupere le code assembleur 'inline' dans : ASM^code_asm ;
end
}

INST ->  asm   #tds ASM #gen ;
#tds {
do
  -- A remplacer par la table courante pour que
  -- l'assembleur puisse acceder aux variables
  ASM^tds_asm := null; 
end
}

#gen {
do
  -- ASM^code_asm contient le code assembleur inline
  -- dans lequel les noms de variables ont ete remplaces
  -- par leurs adresses.
end
}

----------------- CS extension --------------------
-- Decommenter les regles suivantes pour l'extension CS
-------------------------------------------------
--TYPE -> bool;
---- definit un contenu d'un namespace
--ENTITE -> namespace identc aco ENTITES acf ;
---- donne l acces au contenu du 'namespace'
--ENTITE -> using identc IDC pv ;
--IDC -> ;
--IDC -> pt identc IDC ;
---- definition d'une classe (peut etre en dehors d'un namespace)
--ENTITE -> ACCES class identc HERITAGE aco DEFS acf ;
---- acces 
--ACCES -> public;
--ACCES -> private;
--ACCES -> ;
---- heritage
--HERITAGE -> ;
--HERITAGE -> dpts identc IDC ;
---- membres d'une classe
--DEFS -> ;
--DEFS ->  ACCES DEF DEFS ;
--DEF  ->  TYPE ident DECL ;
---- constructeur
--DEF  ->  identc paro PARFS parf BASE BLOC;
---- appel eventuel au constructeur de la classe parente.
--BASE -> ;
--BASE -> dpts base paro ES parf  ;
---- Mode de passage pour les fonctions et méthodes : rien : D, ref : D/R, out : R
--PARF ->  MODE TYPE ident ;
--MODE -> ref ;
--MODE -> out ; 
--F -> true;
--F -> false;
--F -> this FX;
--F -> base FX;
--F -> null2;
--F -> new identc IDC paro ES parf ;
end
