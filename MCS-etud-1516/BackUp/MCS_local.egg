-----------------------------------------------------
-- Grammaires de MC  et MCS                       --
-----------------------------------------------------
--options
option auto = true;
option version = 0.0.1;
option k=2;
--attributes 

-- le fichier source
inh source : MCSSourceFile for PROGRAMME;
-- la machine cible pour la generation de code
inh machine : IMachine for 
         ENTITES, ENTITE, DECL, FONCTION, INST, BLOC, INSTS, SIX,
         PARFS, PARF, PARFSX, ES, ESX, 
         
         E, AFFX, A, AX, R, RX, T, TX, F,FX
--         -- decommenter la ligne suivante pour MCS
--       , BASE, DEFS, DEF
--         -- fin extension MCS
         ;
 syn type : DTYPE for TYPE, STYPE, PTRS,CHAMP, E, AFFX,F,R,RX,
 A,AX,FX,T,TX;
 inh htype: DTYPE for PTRS,DECL,FONCTION,RX,TX,FX,AFFX,AX;
 syn code : STRING for 
         ENTITES, ENTITE, DECL, FONCTION, INST, BLOC, INSTS, SIX,
         ES, ESX, 
         E, AFFX, A, AX, R, RX, T, TX, F,FX;
 inh hcode: STRING for ENTITES, ENTITE, RX,TX,FX,AFFX,AX,ESX;
 syn est_fonction : BOOLEAN for DECL;
 syn code_est_adresse : BOOLEAN for F, FX;
 inh hcode_est_adresse : BOOLEAN for FX;
 syn adresse : Emplacement for A,AX,R,RX,T,TX,F,FX;
 inh hadresse : Emplacement for AFFX,AX,RX,TX,FX;
 inh gauche_affect : BOOLEAN for E, AFFX,A,AX,R,RX,T,TX,F,FX;
 inh hdep : INTEGER for ENTITES, ENTITE, BLOC, INSTS, INST , SIX, CHAMPS;
 syn dep : INTEGER for ENTITES, ENTITE, BLOC, INST , INSTS, SIX;
 inh champs : LCHAMPS for CHAMPS,CHAMP;
 syn para: LinkedHashMap for PARF,PARFS,PARFSX;
 syn ordre: INTEGER for PARF;
 inh hordre : INTEGER for PARF,PARFS,PARFSX;
-- ces attributs permettent de recuperer les instructions du code ASM inline       
syn code_asm : STRING for ASM;
-- la TDS courante
inh tds_asm : TDS for ASM;
inh tds : TDS for ENTITES, ENTITE, DECL, FONCTION,PARF, PARFS,PARFSX, 
TYPE, STYPE, SIX,CHAMPS, CHAMP, INST,INSTS, BLOC, E, A, AFFX, R,
T, TX, ES, ESX, RX,F,FX,AX;
inh nom : STRING for DECL, AFFX, FONCTION;
syn hnom : STRING for CHAMP;
inh infofon : INFOFONC for FONCTION,BLOC,INSTS,INST,SIX;
inh info : INFO for F,FX;
syn op: OPERATEUR for OPADD,OPMUL,OPREL, OPUN;
syn paraset: ArrayList for ESX,ES;
inh hparaset: ArrayList for ESX;
--inh hnum_surcharge : INTEGER for FONCTION;

--terminals
space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar virg is  ",";
sugar pt is "\.";
sugar pv is  "\;";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar asm is  "asm";
sugar int is  "int";
sugar char is  "char";
sugar struct is "struct";
sugar typedef is "typedef";
-- decommenter pour MCS
--sugar ref is "ref" ;
--sugar out is "out";
--sugar namespace is "namespace";
--sugar using is "using";
--sugar class is "class";
--sugar public is "public" ;
--sugar private is "private";
--sugar dpts is "\:";
--sugar bool is "bool";
--sugar true is "true";
--sugar false is "false";
--sugar this is "this";
--sugar new is "new" ;
--sugar null2 is "null";
--sugar base is "base" ;
-- 
sugar retour is  "return";
sugar arrow is "\-\>";
sugar null is  "NULL";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
term entier is  "[0-9]+";
term caractere is  "\'[^\']\'";
term chaine is  "\"[^\"]*\"";
term ident is  "[a-z][_0-9A-Za-z]*";
term identc is  "[A-Z][_0-9A-Za-z]*";

-- pour les instructions en assembleur TAM 'inline'
compil ASM;

--production rules
PROGRAMME -> #init ENTITES #gen;
global
   machine : IMachine;
-- transmission de la machine cible  (choisie par l'option -m au lancement) 
#init {
local
do
   machine := PROGRAMME^source.getMachine();
   if machine = null then
     error(NO_MACH, PROGRAMME^source.getMachName());
   else
     ENTITES^machine := machine;
     ENTITES^tds:= new TDS();
     ENTITES^hdep:=0;
     ENTITES^hcode := "";
   end
end
}
-- ecrit le code dans un fichier
#gen {
local
do
   machine.writeCode(PROGRAMME^source.getFileName(),ENTITES^code);  
end
}
ENTITES -> #dep ;
#dep {
do
  ENTITES^dep := ENTITES^hdep;
  ENTITES^code := ENTITES^hcode;
end
}
ENTITES ->  ENTITE #hdep ENTITES #dep;

#hdep {
do
  ENTITES1^hdep := ENTITE^dep;
  ENTITES1^hcode := ENTITE^code;
end
}
#dep {
do
  ENTITES^dep := ENTITES1^dep;
  ENTITES^code := ENTITES1^code;
end
}


-- definition d'un nom de type (commence par une majuscule)
ENTITE -> typedef TYPE identc pv #type ;
#type{
local
    i: INFO;
do
    i := ENTITE^tds.chercherGlobalement(identc^txt);
    if i /= nil then
       error(B_00, identc^txt);
    else    
      -- creer un type
     i := new INFOTYPE(TYPE^type);
     call ENTITE^tds.inserer(identc^txt, i);
     ENTITE^dep := ENTITE^hdep;
     ENTITE^code := ENTITE^hcode;
    end
end
}
-- definition d'une variable globale ou d'une fonction
-- (commence par une minuscule)
ENTITE -> TYPE ident #decl DECL #code;
#decl{
do
    DECL^nom := ident^txt;
    DECL^htype := TYPE^type;
end
}

#code {
local
iv : INFOVAR;
do
  if ~DECL^est_fonction then
    iv := new INFOVAR(TYPE^type, new Emplacement(ENTITE^hdep,new Register("SB",0)));
    ENTITE^dep := ENTITE^hdep+TYPE^type.getTaille();
    ENTITE^code := ENTITE^hcode + ENTITE^machine.genDecl(ident^txt, iv, ENTITE^machine.genPush(iv.getType()));
    ENTITE^tds.inserer(ident^txt,iv);
  else
    if ENTITE^tds.sansFonction() then
        ENTITE^code := ENTITE^hcode + ENTITE^machine.genCall("_mainX0") + ENTITE^machine.genFin() + DECL^code;
    else
        ENTITE^code := ENTITE^hcode + DECL^code;
    end
  end
end
}
-- Variable
DECL -> pv #def;
#def{
local
i: INFO;
it:INFOTYPE;
do
    i := DECL^tds.chercherGlobalement(DECL^nom);
    if i /= nil then
      error(B_01, DECL^nom);
    else
       i:=new INFOTYPE(DECL^htype);
       call DECL^tds.inserer(DECL^nom, i);
         DECL^est_fonction := false;
         DECL^code := "";
    end
end
}
DECL -> #def FONCTION #fct;
#def{
local
i :INFO;
iff : INFOFONC;
m : ArrayList;
surcharge : SURCHARGE;
num_surcharge : INTEGER;
do
    m := new ArrayList();
    i := DECL^tds.chercherGlobalement(DECL^nom);
    if i /= nil then
      match i
      with INFOFONC then
        iff := i;
--        num_surcharge := iff.addSurcharge(DECL^nom);
        FONCTION^infofon := iff;
--        FONCTION^hnum_surcharge := num_surcharge;
      else
        error(B_16, DECL^nom);
      end
    else
       FONCTION^htype := DECL^htype;
--       surcharge := new SURCHARGE(new LinkedHashMap(), DECL^nom + "X0");
--       m.add(surcharge);
       iff := new INFOFONC(DECL^htype,m,DECL^tds);
       FONCTION^infofon:= iff;
--       FONCTION^hnum_surcharge := 0;
       call DECL^tds.inserer(DECL^nom, iff);
    end
end
}

#fct {

do
  DECL^est_fonction:=true;
  DECL^code := FONCTION^code;
end
}
-- Fonction
FONCTION ->    paro #tds PARFS parf #info BLOC #code ;
global
s : SURCHARGE;
num_surcharge : INTEGER;
#tds{
local
t: TDS;
t2: TDS;
do
    t := new TDS(FONCTION^tds);
    PARFS^tds := t;
    t2 := new TDS(t);
    BLOC^tds := t2;
    
    FONCTION^infofon.setTds(t2); 
    
    PARFS^hordre := 0;
end
}

#info{
local
t : TDS;
m : LinkedHashMap;
do

    --penser à surcharge la méthode mmParas pour gérer les LinkedHashMap en paramètre
    if (FONCTION^infofon.mmParas(PARFS^para) /= -1) then
        error(B_02, FONCTION^nom);
    else
        num_surcharge := FONCTION^infofon.addSurcharge(FONCTION^nom);
        s:=FONCTION^infofon.getSurcharge(num_surcharge);
        m := s.getParas();
        m.putAll(PARFS^para);
        BLOC^infofon := FONCTION^infofon;
        BLOC^hdep := 3;
    end
end
}

#code {
local
t : DTYPE;
tailleparas : INTEGER;
do
  tailleparas := s.getTailleParas();
  t := FONCTION^infofon.getRtype();
  FONCTION^code := FONCTION^machine.genFonction(s.getEtiq(), tailleparas, t.getTaille(), BLOC^code);
end
}


-- parametres de fonctions
PARFS -> #gen ;
#gen{
local
do
    PARFS^para:= new LinkedHashMap();
end
}

PARFS ->  PARF #hordre PARFSX #GEN ;
#GEN{
local
m : LinkedHashMap;
do
    m := new LinkedHashMap();
    m.putAll(PARF^para);
    m.putAll(PARFSX^para);
    PARFS^para := m;
end
}
#hordre{
do
    PARFSX^hordre := PARF^ordre;
end
}
PARFSX -> #gen ;
#gen{
local
do
    PARFSX^para:= new LinkedHashMap();
end
}

PARFSX ->  virg PARF #hordre PARFSX #GEN ;
#GEN{
local
m : LinkedHashMap;
do
    m := new LinkedHashMap();
    m.putAll(PARF^para);
    m.putAll(PARFSX1^para);
    PARFSX^para:=m;
end
}
#hordre{
do
    PARFSX1^hordre := PARF^ordre;
end
}

PARF ->  TYPE ident #gen;
#gen{
local
i:INFOVAR;
m: LinkedHashMap;
o : INTEGER;
do
    o := PARF^hordre + TYPE^type.getTaille();
    i := new INFOVAR(TYPE^type,new Emplacement(-o, new Register("LB",0)));
    PARF^ordre := o;
    m := new LinkedHashMap();
    m.put(ident^txt,i);
    PARF^para := m;
    call PARF^tds.inserer(ident^txt,i);
end
}

-- les types (de base, noms, struct et pointeurs)
TYPE -> STYPE #type1 PTRS #type2 ;
#type1 {
do 
    PTRS^htype := STYPE^type;
end 
}

#type2 {
do 
    TYPE^type := PTRS^type;
end 
}
-- type de base
-- des * pour definir un pointeur
PTRS -> #type;
#type{
do
    PTRS^type:=PTRS^htype;
end
}


PTRS -> mult #type1 PTRS #type;
#type1{
 local
  p : POINTEUR ;

do
    PTRS1^htype := new POINTEUR(PTRS^htype);
end
}

#type {
do
PTRS^type:=PTRS1^type;
end
}

-- types de base
STYPE-> void #type ;
#type {
do
    STYPE^type := new DTYPE("void", 0);
    -- il faut encore définir la bonne taille
end
}
STYPE-> int #type;
#type {
do
    STYPE^type := new DTYPE("int", 1);
    -- il faut encore définir la bonne taille
end
}
STYPE-> char #type;
#type {
do
    STYPE^type := new DTYPE("char", 1);
    -- il faut encore définir la bonne taille
end
}
-- nom de type (commence par une majuscule)
STYPE -> identc #type;

#type {
 local
    i : INFO ;
    it : INFOTYPE;
    t : DTYPE;
 do
    -- rechercher l'ident   
    i := STYPE^tds.chercherGlobalement(identc^txt);
    if i = nil then
      error(B_03, identc^txt);
    else
       match i
       with INFOTYPE then
         it := i ;
         STYPE^type :=  it.getType();
       else
          error(B_04, identc^txt);
       end
    end
  end
}
-------------  
-- et struct
STYPE -> struct aco #ch CHAMPS acf  #type ;
global 
 lc : LCHAMPS ;
#ch {
do
  lc := new LCHAMPS();
  CHAMPS^champs := lc;
  CHAMPS^hdep := 0;
end
}

#type {
 do
   STYPE^type := new STRUCT(lc);
 end
}

CHAMPS -> ;
-- un nom de champ commence par une minuscule
CHAMPS -> CHAMP #ch CHAMPS ;
#ch {
 local
  c : CHAMP ;
 do
  c := CHAMPS^champs.chercher(CHAMP^hnom);
    if c /= nil then
       error(B_05, CHAMP^hnom);
    else    
      c := new CHAMP(CHAMP^hnom, CHAMP^type, CHAMPS^hdep);
     call CHAMPS^champs.inserer(c);
     CHAMPS1^hdep := CHAMPS^hdep +CHAMP^type.getTaille();
    end
 end
}

CHAMP -> TYPE ident pv #gen;
#gen {
do
    CHAMP^hnom:=ident^txt;
    CHAMP^type := TYPE^type;
end
}

-- corps de fonction et bloc d'instructions
BLOC -> aco #tds INSTS acf #gen ;
global        -- globale aux actions de cette regle
  t : TDS;    -- pour voir la TDS du bloc
#tds {
do
   t :=  new TDS(BLOC^tds);
   INSTS^tds := t;
   INSTS^hdep := BLOC^hdep;
end
}

#gen {
do
    BLOC^code := INSTS^code+BLOC^machine.genFree(t.getTailleLocales());
    BLOC^dep := INSTS^dep;
end
}

-- instructions
INSTS ->   #gen;

#gen {
do
  INSTS^code :="";
  INSTS^dep := INSTS^hdep;
end
}
INSTS ->  INST #hdep INSTS #code ;
#hdep {
do
  INSTS1^hdep := INST^dep;
end
}
#code {
do
  INSTS^code := INST^code + INSTS1^code;
  INSTS^dep := INSTS1^dep;
end
}

-- declaration de variable locale avec ou sans init 
INST ->  TYPE ident #type #tds AFFX pv #code;
#type{
local
t : DTYPE;
tp : DTYPE;
p : POINTEUR;
do
t := TYPE^type;
AFFX^htype:= t;
--match t
--with POINTEUR then
--    p := t;
--    tp := p.getTypeP();
--    AFFX^hcode := INST^machine.genMalloc(tp.getTaille());
--else
    AFFX^hcode := INST^machine.genPush(TYPE^type);
--end
AFFX^nom := ident^txt;
AFFX^gauche_affect := false;
end
}
#tds{
local
i: INFO;
iv: INFOVAR;
e : Emplacement;
do
 i:= INST^tds.chercherGlobalement(ident^txt);
 if i /= null then error (B_06, " 528");
 else 
    e := new Emplacement(INST^hdep,new Register("LB",0));
    iv:= new INFOVAR(TYPE^type,e);
    AFFX^hadresse := e;
    INST^tds.inserer(ident^txt,iv);
    
    INST^dep := INST^hdep + TYPE^type.getTaille();
  end
end
}
#code{
do
    INST^code := AFFX^code;
end
}


-- instruction expression (affectation et appel de procedure)
INST -> #affect E pv #code ;
#affect{
do
    E^gauche_affect := true;
end
}

#code {
do
  INST^code := E^code;
  INST^dep := INST^hdep;
end
}
-- bloc d'instructions
INST ->  #gen BLOC #code ;
#gen{
local
t :TDS;
do
    t := new TDS(INST^tds);
    BLOC^tds := t;
end
}

#code {
do
  INST^code := BLOC^code;
  INST^dep := BLOC^dep;
end
}
-- conditionnelle
INST ->   si paro #affect E parf #tds BLOC SIX #code ;
global
tds : TDS; 
#affect{
do
    E^gauche_affect := false;
end
}
#tds{
do
    tds := new TDS(INST^tds);
    BLOC^tds := tds;
end
}

#code {
local
do
  INST^code := INST^machine.genIf(E^code, BLOC^code, SIX^code);
  INST^dep := BLOC^dep;
end
}
SIX -> sinon #tds BLOC #code;
#tds{
local
t :TDS;
do
    t := new TDS(SIX^tds);
    BLOC^tds := t;
end
}

#code {
do
  SIX^code := BLOC^code;
  SIX^dep := BLOC^dep;
end
}
SIX -> #code;
#code {
do
  SIX^code := "";
  SIX^dep := SIX^hdep;
end
}
-- retour de fonction
INST ->  retour  #affect E #type pv #code ;
#affect{
do
    E^gauche_affect := false;
end
}

#type{
local
t: DTYPE;
do
    t := INST^infofon.getRtype();
    if ~(t.compareTo(E^type)) then 
         error(B_06,INST^infofon.getEtiq());
       end
end
}

#code {
do
  INST^code := E^code;
  INST^dep := INST^hdep;
end
}



-- les expressions -------------
-----------------------------------------------------------------------
-- E = expression (y compris l'affectation)
-- A = expression figurant dans une affectation
-- R = expression figurant dans une expresion relationnelle (boolean ==)
-- T = expression figurant dans une expression additive (TERME) (+ -)
-- F = expression figurant dans une expression multiplicative (FACTEUR  (* /))
-----------------------------------------------------------------------
E ->  A  #htype AFFX #type;
#htype{
local 

do
AFFX^htype := A^type;
AFFX^hcode := A^code;
AFFX^nom := "";
AFFX^hadresse := A^adresse;
AFFX^gauche_affect := false;
end
}
#type{
local
s: ArrayList;
do
 if ~(A^type.compareTo(AFFX^type)) then 
  error (B_15, A^type.getNom(),AFFX^type.getNom());
 end
 E^type:= A^type;
 E^code := AFFX^code;

end
}
-- affectation
AFFX -> affect  A   #type;
#type{
do
      AFFX^type := A^type;
  if (AFFX^hadresse /= nil) then
    AFFX^code :=  AFFX^hcode + A^code
                  + AFFX^machine.genWriteMem(AFFX^hadresse.getDep(),A^type.getTaille(),AFFX^hadresse.getReg());
  else
    AFFX^code := A^code + AFFX^hcode + AFFX^machine.genWriteIndirectMem(A^type.getTaille());
  end
end
}
AFFX -> #type;
#type{
local

do
  AFFX^type:=AFFX^htype;
  AFFX^code := AFFX^hcode;

end
}
-- relation
A ->   R #htype AX #type  ;

#htype{ 
do
  AX^htype := R^type;
  AX^hcode := R^code;
  AX^hadresse := R^adresse;
end
}
#type{
local
do
  A^type:= AX^type;
  A^code := AX^code;
  A^adresse := AX^adresse;
end
}

AX -> OPREL R #type;
#type{
do
 if ~(R^type.compareTo(AX^htype) ) then 
  error (B_09," 697" +" mauvais type");
 else
  AX^type:=new DTYPE("int", 1);
  AX^code := AX^hcode + R^code + AX^machine.genSubr(OPREL^op, R^type);
  AX^adresse := nil;
 end
end
}

AX ->  #type;
#type{
do
  AX^type := AX^htype;
  AX^code := AX^hcode;
  AX^adresse := AX^hadresse;
end
}
-- operateurs relationnels
OPREL -> inf #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(0);
    OPREL^op := o;
end
}
OPREL -> sup #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(1);
    OPREL^op := o;
end
}
OPREL -> infeg #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(2);
    OPREL^op := o;
end
}
OPREL -> supeg #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(3);
    OPREL^op := o;
end
}
OPREL -> eg #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(4);
    OPREL^op := o;
end
}
OPREL -> neg #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(5);
    OPREL^op := o;
end
}
R ->  T #htype RX #type ;
#htype{
local
do
    RX^htype := T^type;
    RX^hcode := T^code;
    RX^hadresse := T^adresse;
end
}

#type{
local
do
    R^type := RX^type;
    R^code := RX^code;
    R^adresse := RX^adresse;
end
}

-- additions ...
RX ->   OPADD  T #htype RX #type ;
#htype{
do
    if(~T^type.compareTo(RX^htype) || ~RX^htype.OpCompat(OPADD^op))
        then error(B_07,T^type,RX^htype,"+");
    else
        RX1^htype := RX^htype; 
        RX1^hcode := RX^hcode + T^code + RX^machine.genSubr(OPADD^op, T^type);
        RX1^hadresse := nil;
    end
end
}

#type{
do
    RX^type := RX1^type; 
    RX^code := RX1^code;
    RX^adresse := nil;
end
}

RX -> #type;
#type{
do
    RX^type := RX^htype; 
    RX^code := RX^hcode;
    RX^adresse := RX^hadresse;
end
}

-- operateurs additifs
OPADD -> plus #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(6);
    OPADD^op := o;
end
}
OPADD -> moins #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(7);
    OPADD^op := o;
end
}
OPADD -> ou #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(8);
    OPADD^op := o;
end
}
-- multiplication, ...
T -> #info  F #hcode TX #code ;
#info{
do
 F^info := null;
end
}
#hcode{
local
do
    TX^htype := F^type;
    TX^hcode := F^code;
    TX^hadresse := F^adresse;
end
}

#code{
local
do
    T^type := TX^type;
    T^code := TX^code;
    T^adresse := TX^adresse;
end
}
TX ->   OPMUL #info F #htype TX #type ;
#info{
do
   F^info := null;
end
}

#htype{
do
    if(~F^type.compareTo(TX^htype) || ~TX^htype.OpCompat(OPMUL^op))
        then error(B_07,F^type,TX^htype,"*");
    else
        TX1^htype := TX^htype; 
        TX1^hcode := TX^hcode + F^code + TX^machine.genSubr(OPMUL^op, F^type);
        TX1^hadresse := nil;
        
    end
end
}
#type{

do
    TX^type := TX1^type; 
   TX^code := TX1^code;
   TX^adresse := TX1^adresse;
end
}

TX -> #type ;
#type{
do
    TX^type := TX^htype; 
    TX^code := TX^hcode;
    TX^adresse := TX^hadresse;
end
}

-- operateurs multiplicatifs
OPMUL -> mult #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(9);
    OPMUL^op := o;
end
}
OPMUL -> div #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(10);
    OPMUL^op := o;
end
}
OPMUL -> mod #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(11);
    OPMUL^op := o;
end
}
OPMUL -> et #a ;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(12);
    OPMUL^op := o;
end
}
-- expressions de base
-- Constante entiere
F -> entier   #type;

#type{
do
       F^type := new DTYPE("int", 1);
    -- il faut encore définir la bonne taille
    F^code_est_adresse := false;
    F^code := F^machine.genCst(entier^txt);
    F^adresse := nil;
end
}
-- Constante chaine
--F -> chaine #type;

--#type{
--do
--       F^type := new DTYPE("string", 1);
    -- il faut encore définir la bonne taille
--end
--}
-- Constante caractere
F -> caractere #type;
#type{
do
       F^type := new DTYPE("char", 1);
       F^code_est_adresse := false;
       F^code := F^machine.genCst(caractere^txt);
       F^adresse := nil;
end
}
-- expression unaire
F ->  OPUN  F #type ;
#type{
do

   if ~F1^type.OpCompat(OPUN^op) then 
    error (B_12," 992");
   else
    F^type := F1^type;
    F^code := F1^code + F^machine.genSubr(OPUN^op, F1^type);
    F^code_est_adresse := F1^code_est_adresse;
    F^adresse := nil;
   end

end
}

-- operateurs unaires
OPUN -> plus #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(13);
    OPUN^op := o;
end
}
OPUN -> moins #a ;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(14);
    OPUN^op := o;
end
}
OPUN -> non #a;
#a{
local
o : OPERATEUR;

do
    o := new OPERATEUR(15);
    OPUN^op := o;
end
}
-- pointeur NULL
F -> null #type ;

#type{
do
   F^type := new POINTEUR(null);
   F^code := F^machine.genNull();
   F^code_est_adresse := true;
   F^adresse := nil;
end
}
-- expression parenthesee
F ->  paro E parf #htype FX #type;
#htype{
local
do
    FX^htype := E^type;
    FX^hcode := E^code;
    FX^hcode_est_adresse := false;
    FX^hadresse := nil;
end
}
#type{
do
    F^type:= FX^type;
    F^code := FX^code;
    F^code_est_adresse := FX^code_est_adresse;
    F^adresse := nil;
end
}

F ->  paro TYPE parf  F #type ;
#type{
do
   F^type:= TYPE^type;
    F^code := F1^code;
    F^code_est_adresse := F1^code_est_adresse;
    F^adresse := nil;
end
}

F -> mult F #type ;
#type{
local
t : DTYPE;
tp : DTYPE;
do
    t := F1^type;
    match t
    with POINTEUR then
        tp := t.getTypeP();
        F^type := tp;
        match tp
        with POINTEUR then
            F^code_est_adresse := true;
        else
            F^code_est_adresse := false;
        end
    else
        error(B_08,F1^type);
    end
    if F^gauche_affect then
        F^code := F1^code;
    else
        F^code := F1^code + F^machine.genReadIndirectMem(F1^type.getTaille());
    end
    F^adresse := nil;
end
}
-- donner les infos a FX
F -> ident #htype FX #type ;
#htype{
local
i :INFO;
iv : INFOVAR;
i_f : INFOFONC;
t : DTYPE;
e : Emplacement;
eti : String; 
do
    i := F^tds.chercherGlobalement(ident^txt);
    if i = nil then
        error(B_03, ident^txt);
    else
        FX^info := i;
        --FX^htype := i.getType();
        match i
        with INFOVAR then
            iv := i;
            e := iv.getEmpl();
            t := iv.getType();
            FX^hadresse := e;
            FX^htype := iv.getType();
            match t
            with STRUCT then
                if ~F^gauche_affect then
                    FX^hcode := F^machine.genAdr(e.getDep(), e.getReg());
                else
                    FX^hcode := "";
                end
                FX^hcode_est_adresse := false;
            else match t
            with POINTEUR then
                FX^hcode := F^machine.genReadMem(e.getDep(), t.getTaille(), e.getReg());
                FX^hcode_est_adresse := true;
            else
                if F^gauche_affect then
                    FX^hcode := F^machine.genComment("gauche_affect");
                else
                    FX^hcode := F^machine.genReadMem(e.getDep(), t.getTaille(), e.getReg());
                end
                FX^hcode_est_adresse := false;
            end
            
           end 
            
        else match i
        with INFOFONC then
            i_f := i;
            FX^htype := i_f.getRtype();
                FX^hcode := "";
                FX^hcode_est_adresse := false;
        else
            
            error(B_09,ident^txt);
        end
        end
    end
end
}

#type{
do
    F^type := FX^type;
    F^code := FX^code;
    F^code_est_adresse := FX^code_est_adresse;
    F^adresse := FX^adresse;
end
}

FX -> #type ;
#type{
do
        FX^type := FX^htype;
        FX^code:=FX^hcode;
        FX^code_est_adresse := FX^hcode_est_adresse;
        FX^adresse := FX^hadresse;
end
}

-- acces champ
FX ->  pt  ident #htype FX #type ;

#htype {
local
 s : STRUCT ;
 t :DTYPE;
 tident: DTYPE;
 c : CHAMP;
 lc : LCHAMPS;
 i : INFO;
 iv : INFOVAR;
do
    t := FX^htype;
        match t
          with STRUCT then
            s := t;
            lc := s.getChamps();
            c := lc.chercher(ident^txt);
            if c = nil then
              error(B_10,ident^txt, t.getNom());
            else
              if (FX^hadresse /= nil) then
                FX1^hadresse := new Emplacement(FX^hadresse.getDep() + c.getDep(), FX^hadresse.getReg());
              end
              FX1^htype := c.getType();
            tident := c.getType();
            if (FX^gauche_affect) then
                if (FX^hcode_est_adresse) then
                  FX1^hcode := FX^hcode + FX^machine.genAdrField(c.getDep());
                else
                  FX1^hcode := FX^hcode;
                end
            else
                FX1^hcode := FX^hcode + FX^machine.genAdrField(c.getDep()) + FX^machine.genReadIndirectMem(tident.getTaille());
            end
            
            end    
          else
            error(B_11,t.getNom()); 
          end
end
}

#type{
do
    FX^type := FX1^type;
    FX^code:=FX1^code;
    FX^code_est_adresse := FX1^code_est_adresse;
    FX^adresse := FX1^adresse;
end
}

-- acces champ pointeur
FX ->   arrow ident #htype FX #type ;
#htype {
local
p : POINTEUR ;
t :DTYPE;
tp : DTYPE;
code : STRING;
lc : LCHAMPS;
s : STRUCT ;
c : CHAMP;
i : INFO;
iv : INFOVAR;
tc : DTYPE;
do
    i := FX^info;
    match i 
    with INFOVAR then
        iv := i;
        t := iv.getType();
        match t
        with POINTEUR then
            p := t;
            tp := p.getTypeP();
            FX1^htype := tp;
            match tp with STRUCT then 
                s := tp;
                lc := s.getChamps();
                c := lc.chercher(ident^txt);
                if c = nil then
                    error(B_10, ident^txt,tp.getNom()) ;
                else
                    FX1^htype := c.getType();
                    FX1^hadresse := nil;
                    if FX^gauche_affect then
                       FX1^hcode := FX^hcode + FX^machine.genAdrField(c.getDep());
                    else
                       tc := c.getType();
                       FX1^hcode := FX^hcode + FX^machine.genAdrField(c.getDep()) + FX^machine.genReadIndirectMem(tc.getTaille());
                    end
                end
            else
                error(B_11, tp.getNom());
            end
        
        else
            error(B_08, t.getNom());
        end
    else
        error(B_12);
    end       
end
}

#type{
do
    FX^type := FX1^type;
    FX^code := FX1^code;
    FX^code_est_adresse := false;
    FX^adresse := nil;
end
}


-- appel de sous-programme
FX ->   paro ES parf #htype FX #type;

#htype{
local
iff :INFOFONC;
num_surcharge : INTEGER;
surcharge : SURCHARGE;
do
    match FX^info 
      with INFOFONC then
        iff := FX^info;
        num_surcharge := iff.mmParas(ES^paraset);
        if (num_surcharge = -1) then
            surcharge := iff.getSurcharge(0);
            error(B_13,iff.getEtiq());
        else
            surcharge := iff.getSurcharge(num_surcharge);
            FX1^hcode := ES^code + FX^machine.genCall(surcharge.getEtiq()) + FX^machine.genComment("appel de fonction");
        end
      else 
        error(B_14);  
    end
end
}

#type{
do
    FX^type := FX1^type;
    FX^code := FX1^code;
    FX^code_est_adresse := FX1^code_est_adresse;
    FX^adresse := nil;
end
}

-- arguments appel de sous-programme
ES -> #gen;
#gen{
local
    set : ArrayList;
do
    set := new ArrayList();
    ES^paraset:= set;
    ES^code := "";
end
}

ES -> #affect E #htype ESX  #paraset;
#affect{
do
    E^gauche_affect := false;
end
}
#htype {
local
    set : ArrayList;
do
    set := new ArrayList();
    set.add(E^type);
    ESX^hparaset:= set;
    ESX^hcode := E^code;
end
}

#paraset{
local
do
    ES^paraset := ESX^paraset;
    ES^code := ESX^code;
end
}


ESX ->  #paraset;
#paraset{
local
do
    ESX^paraset := ESX^hparaset;
    ESX^code := ESX^hcode;
end
}

ESX -> virg #affect E #htype ESX #paraset;
#affect{
do
    E^gauche_affect := false;
end
}
#htype {
do
    ESX^hparaset.add(E^type);
    ESX1^hparaset:=ESX^hparaset;
    ESX1^hcode := E^code + ESX^hcode;
end
}


#paraset{
do
    ESX^paraset:=ESX1^paraset;
    ESX^code := ESX1^code;
end
}

------------- inline asm ----------------
-- peut être utile pour implanter des sous-programmes
-- directement en assembleur TAM.
ENTITE ->   asm #tds ASM#gen; 
#tds {
do 
  -- A faire : Remplacer 'null' par la table courante pour que
  -- le code  ASM puisse acceder aux variables de MC ou MCS
  ASM^tds_asm := ENTITE^tds; 
end
}
#gen {
do
  -- On recupere le code assembleur 'inline' dans : ASM^code_asm ;
  ENTITE^code := ASM^code_asm;
  ENTITE^dep := ENTITE^hdep;
end
}

INST ->  asm   #tds ASM #gen ;
#tds {
do
  -- A remplacer par la table courante pour que
  -- l'assembleur puisse acceder aux variables
  ASM^tds_asm := INST^tds; 
end
}

#gen {
do
  -- ASM^code_asm contient le code assembleur inline
  -- dans lequel les noms de variables ont ete remplaces
  -- par leurs adresses.
  INST^code := ASM^code_asm;
  INST^dep := INST^hdep;
end
}

----------------- CS extension --------------------
-- Decommenter les regles suivantes pour l'extension CS
-------------------------------------------------
--TYPE -> bool;
---- definit un contenu d'un namespace
--ENTITE -> namespace identc aco ENTITES acf ;
---- donne l acces au contenu du 'namespace'
--ENTITE -> using identc IDC pv ;
--IDC -> ;
--IDC -> pt identc IDC ;
---- definition d'une classe (peut etre en dehors d'un namespace)
--ENTITE -> ACCES class identc HERITAGE aco DEFS acf ;
---- acces 
--ACCES -> public;
--ACCES -> private;
--ACCES -> ;
---- heritage
--HERITAGE -> ;
--HERITAGE -> dpts identc IDC ;
---- membres d'une classe
--DEFS -> ;
--DEFS ->  ACCES DEF DEFS ;
--DEF  ->  TYPE ident DECL ;
---- constructeur
--DEF  ->  identc paro PARFS parf BASE BLOC;
---- appel eventuel au constructeur de la classe parente.
--BASE -> ;
--BASE -> dpts base paro ES parf  ;
---- Mode de passage pour les fonctions et méthodes : rien : D, ref : D/R, out : R
--PARF ->  MODE TYPE ident ;
--MODE -> ref ;
--MODE -> out ; 
--F -> true;
--F -> false;
--F -> this FX;
--F -> base FX;
--F -> null2;
--F -> new identc IDC paro ES parf ;
end
